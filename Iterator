using System;
using System.Drawing;
using System.Collections;
using System.Windows.Forms;



namespace MySystem
{   
    class Program
    {
        static void Main(string[] args)
        {
            ConcreteAggregate a = new ConcreteAggregate();
            a[0] = "Item A";
            a[1] = "Item B";
            a[2] = "ITem C";

            ConcreteIterator i = new ConcreteIterator(a);

            object item = i.First();
            while(item != null)
            {
                Console.WriteLine(item);
                item = i.Next();
            }

            Console.ReadKey();
        }

    }

    abstract class Aggregate
    {
        public abstract Iterator CreateIterator();
    }

    class ConcreteAggregate : Aggregate
    {
        private ArrayList _items = new ArrayList();

        public override Iterator CreateIterator()
        {
            return new ConcreteIterator(this);
        }

        public int Count
        {
            get
            {
                return _items.Count;
            }
        }

        public object this[int index]
        {
            get
            {
                return _items[index];
            }
            set
            {
                _items.Insert(index, value);
            }
        }
    }

    abstract class Iterator
    {
        public abstract object First();
        public abstract object Next();
        public abstract bool IsDone();
        public abstract object CurrentItem();
    }
    
    class ConcreteIterator : Iterator
    {
        private ConcreteAggregate _aggregate;
        private int _current = 0;

        public ConcreteIterator(ConcreteAggregate aggregate)
        {
            this._aggregate = aggregate;
        }

        public override object First()
        {
            return _aggregate[0];
        }

        public override object Next()
        {
            object ret = null;
            if(_current < _aggregate.Count - 1)
            {
                ret = _aggregate[++_current];
            }
            
            return ret;
        }

        public override object CurrentItem()
        {
            return _aggregate[_current];
        }

        public override bool IsDone()
        {
            return _current >= _aggregate.Count;
        }
    }




    /*
        Iterator Pattern
        -   컬렉션 구현 방법을 노출시키지 않으면서 그 집합체 안에 들어있는 모든 항목에 접근할 수 있게 해주는 방법을 제공한다
        -   반복자 패턴을 이용하면 집합체 내에서 어떤식으로 일이 처리되는지 모르는 상태에서도 그 안에 있는 항목들에 대해서 반복작업을 수행할 수 있다.
        -   클래스가 데이터를 저장함에 있어서 배열 ArrayList 해쉬테이블 등등의 데이터 구조를 사용한다 할지라도 이터레이터 인터페이스를 구현하게 함으로써 외부에서는 동일한 인터페이스를 각각의 항목에 대해서 순차적으로 접근이 가능하다.
    */

}
