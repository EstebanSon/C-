using System;
using System.Drawing;
using System.Collections.Generic;
using System.Windows.Forms;



namespace MySystem
{   
    class Program
    {
        static void Main(string[] args)
        {
            ConcreteSubject s = new ConcreteSubject();

            s.Attach(new ConcreteObserver(s, "X"));
            s.Attach(new ConcreteObserver(s, "Y"));
            s.Attach(new ConcreteObserver(s, "Z"));

            s.SubjectState = "ABC";
            s.Notify();

            Console.ReadKey();
        }
    }

    abstract class Subject
    {
        private List<Observer> _observers = new List<Observer>();

        public void Attach(Observer observer)
        {
            _observers.Add(observer);
        }

        public void Detach(Observer observer)
        {
            _observers.Remove(observer);
        }

        public void Notify()
        {
            foreach(Observer o in _observers)
            {
                o.Update();
            }
        }
    }

    class ConcreteSubject : Subject
    {
        private string _subjectState;

        public string SubjectState
        {
            get
            {
                return _subjectState;
            }
            set
            {
                _subjectState = value;
            }
        }
    }

    abstract class Observer
    {
        public abstract void Update();
    }

    class ConcreteObserver : Observer
    {
        private string _name;
        private string _observerState;
        private ConcreteSubject _subject;

        public ConcreteObserver(ConcreteSubject subject, string name)
        {
            this._subject = subject;
            this._name = name;
        }

        public override void Update()
        {
            _observerState = _subject.SubjectState;
            Console.WriteLine("Observer {0} new state is {1}", _name, _observerState);
        }

        public ConcreteSubject subject
        {
            get
            {
                return _subject;
            }
            set
            {
                _subject = value;
            }
        }
    }
    

    /*
        Observer Pattern
        - 한 객체의 상태가 바뀌면 그 객체에 의존하는 다른 객체들한테 연락이 가고 자동으로 내용이 갱신되는 방식으로 일대다 의존성을 결정한다.
        - 한 객체의 상태가 변경되면 그 객체 의존하는 모든 객체에 연락을 한다.
        - 객체의 상태를 참조하는 대상에 일관성을 보장한다
        - 객체의 상태가 변경될시에 참조를 하고 있는 대상들은 자동으로 상태가 업데이트 된다.
    */

}
